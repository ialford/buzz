AWSTemplateFormatVersion: '2010-09-09'
Description: >
  - Creates a CodeBuild Project to pull the GitHub repository,
  build a Docker Image based on the repository.
  - Creates a CodePipeline that has a specific CodeBuild associated,
  which on a merge to master will build the Docker image, push it to
  a created ECR repository, and deploy it to a test stack.

  Expects the following exports from the service stack(s):
    - ProdServiceStackName:Service
    - TestServiceStackName:Service

Parameters:

  TestUrlPath:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The path to the param that stores the test URL.
    Default: "/all/stacks/buzz-service-test/url"

  CDBranchName:
    Type: String
    Default: master
    Description: The name of the branch to watch for continuous deployment

  Approvers:
    Type: String
    Default: ''
    Description: An e-mail address of someone who can approve test environment

  ProdServiceStackName:
    Type: String
    Default: buzz-service-prod
    Description: The name of the CloudFormation stack that created the production ECS Service

  TestServiceStackName:
    Type: String
    Default: buzz-service-test
    Description: The name of the CloudFormation stack that created the test ECS Service

  InfrastructureStackName:
    Type: String
    Default: buzz-app-infrastructure
    Description: The name of the parent infrastructure/networking stack that you created. Necessary
                 to locate and reference resources created by that stack.

  PrepEnvPath:
    Type: String
    Description: The path to the variables in parameter store to inject into the
                 environment of the code build. This is needed within the pipeline in order to
                 match the deployed application environment when running things like db:migrate.

  ProdEnvPath:
    Type: String
    Description: The path to the variables in parameter store to inject into the
                 environment of the code build. This is needed within the pipeline in order to
                 match the deployed application environment when running things like db:migrate.

  OAuth:
    Type: String
    NoEcho: true
    Description: The OAuth Token Value to connect CodePipeline to GitHub. Passed in at Runtime.

  PrivateSubnet1ID:
    Type: String

  PrivateSubnet2ID:
    Type: String

  VPCID:
    Type: String

  RDSSecurityGroup:
    Type: String
    Description: The security group that will allow the build step to communicate with the RDS instance

Outputs:

  ContainerRepositoryName:
    Description: Name of the created container repository
    Value: !Ref AmazonContainerRepository
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Repository']]

  PipelineName:
    Description: The name of the pipeline created by this stack
    Value: !Ref CodePipeline
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PipelineName']]

Resources:
  SNSTopic:
    Type: AWS::SNS::Topic

  SNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: !Ref Approvers

  AmazonContainerRepository:
    Type: AWS::ECR::Repository

  CodeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ##### Roles/Policies ######
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodePipelineToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  CodePipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy to Allow CodePipeline to do its work"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
              - codepipeline:*
              - sns:Publish
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !GetAtt CodeS3Bucket.Arn
              - Fn::Join:
                  - ""
                  -
                    - !GetAtt CodeS3Bucket.Arn
                    - "/*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Resource:
              - !GetAtt ImageBuilder.Arn
              - !GetAtt QARunner.Arn
              - !GetAtt TestMigrationRunner.Arn

          - Effect: Allow
            Action:
              - ecs:UpdateService
              - ecs:RegisterTaskDefinition
              - ecs:List*
              - ecs:CreateService
            Resource: "*"
      Roles:
        - !Ref CodePipelineRole

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*:*:*
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt CodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt CodeS3Bucket.Arn
                        - "/*"

  MigrationBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*:*:*
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt CodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt CodeS3Bucket.Arn
                        - "/*"
        -
          PolicyName: "GetAppEnvParams"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ssm:GetParametersByPath"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PrepEnvPath}/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProdEnvPath}/*"
        -
          PolicyName: "AllowAccessToVPC"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeVpcs"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "ec2:CreateNetworkInterfacePermission"
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                Condition:
                  StringEquals:
                    "ec2:Subnet":
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet1ID}"
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet2ID}"
                    "ec2:AuthorizedService": "codebuild.amazonaws.com"

  #### Code Builds ####
  QARunner:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${AWS::StackName}_qa_runner"
      Description: 'Run Newman Tests against buzz'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: GITHUB
        Location: 'https://github.com/ndlib/buzz.git'
        GitCloneDepth: 1
        ReportBuildStatus: true
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Build started on `date`
                - |
                  printf '{"name": "app-host","values": [{"key": "app-host","value": "%s"}, {"key": "host-protocol","value": "https"}],"_postman_variable_scope": "environment"}' $TESTING_URL >> test_env.json
                - cat test_env.json
                - newman run spec/postman/spec.json -e test_env.json --insecure
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: postman/newman
        EnvironmentVariables:
          - Name: TESTING_URL
            Value: !Ref TestUrlPath

  ImageBuilder:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${AWS::StackName}_image_builder"
      Description: 'Build Docker Image from GitHub for CodePipeline'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: deploy/buildspec.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: APPLICATION_NAME
            Value: ndlib-buzz
          - Name: IMAGE_REPO_NAME
            Value: !Ref AmazonContainerRepository
          - Name: IMAGE_TAG
            Value: latest
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: TEST_CONTAINER_NAME
            Value:
              Fn::ImportValue: !Join [ ':', [ !Ref 'TestServiceStackName', 'Service']]
          - Name: PROD_CONTAINER_NAME
            Value:
              Fn::ImportValue: !Join [ ':', [ !Ref 'ProdServiceStackName', 'Service']]

  TestMigrationRunner:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${AWS::StackName}_test_migration_runner"
      Description: 'Run migrations against test database within the built container'
      ServiceRole: !Ref MigrationBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Running migrations...
                - $(aws ecr get-login --no-include-email --region $AWS_REGION)
                - imageUri=$(cat imagedefinitionstest.json | python -c 'import sys, json; print json.load(sys.stdin)[0]["imageUri"]')
                - docker run -e AWS_REGION=$AWS_REGION -e AWS_CONTAINER_CREDENTIALS_RELATIVE_URI -t $imageUri bundle exec rake db:migrate

      Artifacts:
        Type: CODEPIPELINE
      VpcConfig:
        SecurityGroupIds:
          - !Ref RDSSecurityGroup
        Subnets:
          - !Ref PrivateSubnet1ID
          - !Ref PrivateSubnet2ID
        VpcId: !Ref VPCID
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: APPLICATION_NAME
            Value: ndlib-buzz
          - Name: IMAGE_REPO_NAME
            Value: !Ref AmazonContainerRepository
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodeS3Bucket
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: "RetrieveSourceCode"
              ActionTypeId:
                Owner: ThirdParty
                Category: Source
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: ndlib
                Repo: buzz
                Branch: !Ref CDBranchName
                OAuthToken: !Ref OAuth
              OutputArtifacts:
                - Name: SourceCode
        -
          Name: Build
          Actions:
            -
              Name: "BuildDockerImage"
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ImageBuilder
        -
          Name: MigrateTest
          Actions:
            -
              Name: "MigrateTest"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref TestMigrationRunner
        -
          Name: DeployToTest
          Actions:
            -
              Name: "DeployAsTestTask"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Provider: ECS
                Version: "1"
              Configuration:
                ClusterName:
                  Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ClusterName']]
                ServiceName:
                  Fn::ImportValue: !Join [':', [!Ref TestServiceStackName, 'Service']]
                FileName: imagedefinitionstest.json
        -
          Name: Approval
          Actions:
            -
              Name: "RunQATests"
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref QARunner
              RunOrder: 1
            -
              Name: "ManualApprovalOfTestEnvironment"
              ActionTypeId:
                Owner: AWS
                Category: Approval
                Provider: Manual
                Version: "1"
              Configuration:
                NotificationArn: !Ref SNSTopic
                CustomData: Approval or Reject this change after running Exploratory Tests
              RunOrder: 2
        -
          Name: DeployToProduction
          Actions:
            -
              Name: "DeployToProduction"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Provider: ECS
                Version: "1"
              Configuration:
                ClusterName:
                  Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ClusterName']]
                ServiceName:
                  Fn::ImportValue: !Join [':', [!Ref ProdServiceStackName, 'Service']]
                FileName: imagedefinitionsprod.json
