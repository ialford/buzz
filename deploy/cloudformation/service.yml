AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates the service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer. Will create the following:
    - The ECS Task and Service (via Fargate)
    - A Public Load Balancer to access the private resource over open Internet

  Expects the following exports from the app-infrastructure stack:
    - InfrastructureStackName:ContainerTaskExecutionRoleArn
    - InfrastructureStackName:ClusterName
    - InfrastructureStackName:AuthSecurityGroupID
    - InfrastructureStackName:ContainerTaskExecutionRoleArn
    - InfrastructureStackName:PublicLoadBalancerSecurityGroup
    - InfrastructureStackName:ACMCertificateARN

Parameters:

  PrivateSubnet1ID:
    Type: String

  PrivateSubnet2ID:
    Type: String

  VPCID:
    Type: String

  PublicSubnet1ID:
    Type: String

  PublicSubnet2ID:
    Type: String

  AppEnvPath:
    Type: String
    Description: The path to the variables in parameter store to inject into the
                 environment of the deployed application. Note the exclusion of the
                 leading slash.

  InfrastructureStackName:
    Type: String
    Default: "buzz-app-infrastructure"
    Description: The name of the parent infrastructure that you created. Necessary
                 to locate and reference resources created by that stack.

  ImageUrl:
    Type: String
    Default: ndlib/ecs_placeholder:unencrypted
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service

  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.

  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.

  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  NameTag:
    Type: String
    Description: The value to add for the "Name" tag. This should share a value with all stacks associated with this project
    AllowedPattern: ".+-.+-(dev|prod|prep)(-.+)*"
    ConstraintDescription: "Name should match the pattern [infra]-{service}-[env]-{etc}. Ex: libnd-myservice-dev-myname"

  OwnerTag:
    Type: String
    Description: The value to add for the "Owner" tag. This should be the individual that owns or created this stack.

  ContactTag:
    Type: String
    Description: The value to add for the "Contact" tag. This should be an email or phone of someone to contact for information about this stack

Outputs:
  PublicLoadBalancerDNSName:
    Description: The dns name of the load balancer
    Value: !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicLoadBalancerDNSName']]

  ServiceName:
    Description: The Name of the created ECS Service
    Value: !GetAtt Service.Name
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Service']]

Resources:
  URLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/all/stacks/${AWS::StackName}/url"
      Value: !GetAtt PublicLoadBalancer.DNSName
      Description: The URL endpoint for this component

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ContainerTaskExecutionRoleArn']]
      TaskRoleArn: !GetAtt ServiceTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort:
                Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'BuzzServicePort']]
          Environment:
            - Name: PORT
              Value:
                Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'BuzzServicePort']]
            - Name: ENV_SSM_PATH
              Value: !Ref AppEnvPath
            - Name: RAILS_LOG_TO_STDOUT
              Value: true
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group :
                Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogGroup']]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub '${AWS::StackName}-Task'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}'
      Cluster:
        Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'BuzzServiceSecurityGroupID']]
          Subnets:
            - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}'
          ContainerPort:
            Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'BuzzServicePort']]
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # Important!
      # This path should stay constant throughout all deployments, from the beginning.
      # Otherwise a rollback lock can occur on the stack and the only recourse will
      # be to manually force a steady state by changing desired count to 0.
      #  NOTE: This needs to be fixed!!!
      #HealthCheckPath: /healthcheck
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port:
        Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'BuzzServicePort']]
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '10'
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Ref NameTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Contact
          Value: !Ref ContactTag

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Description: This is the publicly accessible endpoint for the image service.
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      SecurityGroups:
        -
          Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'PublicLoadBalancerSecurityGroup']]
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Tags:
        - Key: Name
          Value: !Ref NameTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Contact
          Value: !Ref ContactTag

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ACMCertificateARN']]
      SslPolicy: ELBSecurityPolicy-2016-08

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Description: This default rule sends all traffic to the target group
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref 'PublicLoadBalancerListener'
      Priority: !Ref 'Priority'

  ServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "GetAppEnvParams"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ssm:GetParametersByPath"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppEnvPath}/*"
